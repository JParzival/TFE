}
dataframe.resultados.perceptron.stats <- cbind(dataframe.resultados.1neu,
dataframe.resultados.1neu.soft,
dataframe.resultados.2neu,
dataframe.resultados.2neu.soft,
dataframe.resultados.3neu,
dataframe.resultados.3neu.soft)
remove(dataframe.resultados.1neu)
remove(dataframe.resultados.1neu.soft)
remove(dataframe.resultados.2neu)
remove(dataframe.resultados.2neu.soft)
remove(dataframe.resultados.3neu)
remove(dataframe.resultados.3neu.soft)
k <- round(sqrt(nrow(data.ml.stats.centscal)), 0)
conjuntoEntrenamiento <- data.ml.stats.centscal[1:45000, ]
conjuntoTest <- data.ml.stats.centscal[45001 : nrow(data.ml.centscal), ] # Utilizo por supuesto la matriz de centrado y escalado
etiquetasEntrenamiento <- data.ml[1:45000, 2]
etiquetasTest <- data.ml[45001:nrow(data.ml.stats.centscal), ]
prediccion.knn.227 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
prob = TRUE,
k = 227)
prediccion.knn.227
CrossTable(x = etiquetasTest ,
y = prediccion.knn.227,
prop.chisq = FALSE)
length(etiquetasTest)
length(prediccion.knn.227)
nrow(data.ml.stats.centscal)
etiquetasTest <- data.ml[45001:nrow(data.ml.stats.centscal), ]
length(etiquetasTest)
conjuntoEntrenamiento <- data.ml.stats.centscal[1:45000, ]
conjuntoTest <- data.ml.stats.centscal[45001 : nrow(data.ml.stats.centscal), ] # Utilizo por supuesto la matriz de centrado y escalado
etiquetasEntrenamiento <- data.ml[1:45000, 2]
etiquetasTest <- data.ml[45001:nrow(data.ml.stats.centscal), ]
prediccion.knn.227 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
prob = TRUE,
k = 227)
head(prediccion.knn.227)
CrossTable(x = etiquetasTest ,
y = prediccion.knn.227,
prop.chisq = FALSE)
prediccion.knn.227 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
k = 227)
head(prediccion.knn.227)
CrossTable(x = etiquetasTest ,
y = prediccion.knn.227,
prop.chisq = FALSE)
conjuntoEntrenamiento <- data.ml.stats.centscal[1:45000, ]
conjuntoTest <- data.ml.stats.centscal[45001 : nrow(data.ml.stats.centscal), ] # Utilizo por supuesto la matriz de centrado y escalado
etiquetasEntrenamiento <- data.ml[1:45000, 2]
etiquetasTest <- data.ml[45001:nrow(data.ml.stats.centscal), 2]
conjuntoEntrenamiento <- data.ml.stats.centscal[1:45000, ]
conjuntoTest <- data.ml.stats.centscal[45001 : nrow(data.ml.stats.centscal), ] # Utilizo por supuesto la matriz de centrado y escalado
etiquetasEntrenamiento <- data.ml[1:45000, 2]
etiquetasTest <- data.ml[45001:nrow(data.ml.stats.centscal), 2]
prediccion.knn.227 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
k = 227)
head(prediccion.knn.227)
CrossTable(x = etiquetasTest ,
y = prediccion.knn.227,
prop.chisq = FALSE)
prediccion.knn.150 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
prob = TRUE,
k = 150)
prediccion.knn.150
CrossTable(x = etiquetasTest ,
y = prediccion.knn.150,
prop.chisq = FALSE)
prediccion.knn.350 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
prob = TRUE,
k = 350)
prediccion.knn.350
prediccion.knn.350 <- knn(train = conjuntoEntrenamiento,
test = conjuntoTest,
cl = etiquetasEntrenamiento,
prob = TRUE,
k = 350)
head(prediccion.knn.350)
CrossTable(x = etiquetasTest ,
y = prediccion.knn.350,
prop.chisq = FALSE)
model <- randomForest(as.factor(data.ml[, 2]) ~ ., data = data.ml[, 1:18], importance = TRUE, ntree = 300)
install.packages("randomforest")
install.packages("randomForest")
library("randomForest")
model <- randomForest(as.factor(data.ml[, 2]) ~ ., data = data.ml[, 1:18], importance = TRUE, ntree = 300)
model
plot(model, main="Random Forest - Solo Stats")
varImpPlot(model, main = "Random Forest (Stats) - MDA y Gini") # Gracias a importance = true
data.ml.rf <-  data.ml[, 1:18]
data.ml.rf <- data.ml.rf[, -2]
data.ml.rf <-  data.ml[, 1:18]
data.ml.rf <- data.ml.rf[, -2]
model <- randomForest(as.factor(data.ml[, 2]) ~ ., data = data.ml.rf, importance = TRUE, ntree = 300)
model
plot(model, main="Random Forest - Solo Stats")
varImpPlot(model, main = "Random Forest (Stats) - MDA y Gini") # Gracias a importance = true
result <- rfcv(data.ml[ , 1:18], as.factor(data.ml[, 2]), cv.fold=10)
result <- rfcv(data.ml.rf, as.factor(data.ml[, 2]), cv.fold=10)
modelo.svm <- svm(data.ml.stats.centscal, as.factor(data.ml[, 2]), kernel = "linear") # Al poner los grupos como factor, estoy consiguiendo que no sean continuos para el modelo, sino "discretos", ya que los factor no son valores que puedan ser continuos. Con esto consigo una clasificación.
install.packages("e1071")
library("e1071")
modelo.svm <- svm(data.ml.stats.centscal, as.factor(data.ml[, 2]), kernel = "linear") # Al poner los grupos como factor, estoy consiguiendo que no sean continuos para el modelo, sino "discretos", ya que los factor no son valores que puedan ser continuos. Con esto consigo una clasificación.
summary(modelo.svm)
prediccion <- predict(modelo.svm, data.ml.stats.centscal)
prediccion
matriz.conf <- table(prediccion, data.ml[, 2])
matriz.conf
sum(diag(matriz.conf))/nrow(data.ml)
modelo_svm.radial <- svm(data.ml.stats.centscal, as.factor(data.ml[, 2]), kernel="radial")
summary(modelo_svm.radial)
prediccion.radial <- predict(modelo_svm.radial, data.ml.stats.centscal)
prediccion.radial
matriz.conf.radial <- table(prediccion.radial, data.ml[, 2])
matriz.conf.radial
sum(diag(matriz.conf.radial))/nrow(data.ml)
View(data.ml)
View(data.ml)
View(data.ml.stats.centscal)
View(data.ml.stats.centscal)
View(dataframe.resultados.perceptron.stats)
View(dataframe.resultados.perceptron.stats)
apply( dataframe.resultados.perceptron.stats[ , 2], MARGIN=1, FUN='which.is.max')
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu), ]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), ]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), 1:2]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu_soft, decreasing = TRUE), 3:4]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), 1:2]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu_soft, decreasing = TRUE), 3:4]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_2neu, decreasing = TRUE), 5:6]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_2neu_soft, decreasing = TRUE), 7:8]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_3neu, decreasing = TRUE), 9:10]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_4neu_soft, decreasing = TRUE), 11:12]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_3neu_soft, decreasing = TRUE), 11:12]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), 1:2]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu_soft, decreasing = TRUE), 3:4]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_2neu, decreasing = TRUE), 5:6]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_2neu_soft, decreasing = TRUE), 7:8]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_3neu, decreasing = TRUE), 9:10]
dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_3neu_soft, decreasing = TRUE), 11:12]
head(dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), 1:2])
head(dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_1neu, decreasing = TRUE), 1:2])
head(dataframe.resultados.perceptron.stats[order(dataframe.resultados.perceptron.stats$Test_3neu_soft, decreasing = TRUE), 11:12])
plot(model, main="Random Forest - Solo Stats")
varImpPlot(model, main = "Random Forest (Stats) - MDA y Gini") # Gracias a importance = true
pie(table(data.games$winner))
pie(table(data.games$winner), main = "Victorias por equipo", col = c("Blue", "Red"))
install.packages("aplpack")
View(data.games)
View(data.games)
muestra_partidas<-data.games[sample(1:dim(data.games)[1],size=32,replace=F), ]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
library("aplpack")
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
muestra_partidas<-data.games[sample(1:dim(data.games)[1],size=16,replace=F), ]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
muestra.chernoff <- sample(2 : dim(data.games)[1], size=16, replace=F)
muestra_partidas<-data.games[muestra.chernoff, ]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
help ("sample")
muestra.chernoff <- data.games[sample_n(data.games, size = 16, replace = FALSE,)]
muestra.chernoff <- data.games[sample_n(data.games, size = 16, replace = FALSE)]
muestra.chernoff <- data.games[sample_n(table(data.games), size = 16, replace = FALSE)]
muestra.chernoff <- data.games[1:16, ]
muestra_partidas<-data.games[muestra.chernoff, ]
muestra_partidas<-data.games[1:16, ]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
muestra_partidas<-data.games[1:16, 6:10]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
muestra_partidas<-data.games[1:16, 6:15]
faces(muestra_partidas[1:4],face.type=1,labels=data.games$winner)
faces(muestra_partidas[1:9],face.type=1,labels=data.games$winner)
faces(muestra_partidas[1:7],face.type=1,labels=data.games$winner)
faces(muestra_partidas[1:6],face.type=1,labels=data.games$winner)
muestra_partidas<-data.games[1:16, 6:15]
faces(muestra_partidas[1:6],face.type=1,labels=data.games$winner[1:16, ])
faces(muestra_partidas[1:6],face.type=1,labels=data.games[1:16, 5])
faces(muestra_partidas[1:7],face.type=1,labels=data.games[1:16, 5])
faces(muestra_partidas[1:6],face.type=1,labels=data.games[1:16, 5])
data.games[1:16, 6:15]
muestra_partidas<-data.games[1:16, 6:11]
faces(muestra_partidas[1:6],face.type=1,labels=data.games[1:16, 5])
muestra_partidas <- data.games[1:16, 27:31]
muestra_partidas <- cbind(muestra_partidas, data.games[1:16, 52:56])
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5])
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas")
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", print.info = TRUE)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 0.7)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 0.9)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 0.5)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 0.1)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 0.9)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 1)
faces(muestra_partidas[1:10], face.type=1,labels=data.games[1:16, 5], main = "Diferencias entre partidas", scale = TRUE, cex = 1.5)
View(data.ml.centscal)
View(data.ml.centscal)
View(data.ml.stats.centscal)
View(data.ml.stats.centscal)
knitr::opts_chunk$set(echo = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
#install.packages("knitr")
#install.packages("dplyr")
#install.packages("pryr")
#install.packages("corrplot")
#install.packages("rjson")
#install.packages("plyr")
#install.packages("wordcloud")
#install.packages("ggplot2")
#install.packages("hexbin")
#install.packages("RColorBrewer")
#install.packages("FactoMineR")
#devtools::install_github("kassambara/factoextra")
#install.packages("factoextra")
#install.packages("arules")
#install.packages("arulesViz")
#install.packages("fastDummies")
#install.packages("caret")
#install.packages("nnet")
#install.packages("gmodels")
#install.packages("class")
#install.packages("randomforest")
#install.packages("e1071")
#install.packages("aplpack")
library("corrplot")
library("dplyr")
library("pryr")
library("rjson")
library("plyr")
library("wordcloud")
library("ggplot2")
library("hexbin")
library("RColorBrewer")
library("FactoMineR")
library("factoextra")
require("arulesViz")
require("arules")
library("Matrix")
library("fastDummies")
library("caret")
library("nnet")
library("gmodels")
library("class")
library("randomForest")
library("e1071")
library("aplpack")
install.packages("doMC")
library("doMC")
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
grid.svm.linear <- expand.grid(size=c(5,10,20,30,40,50), k=c(1,2,3,4,5,6,7,8,9,10))
modelo.svm.tunned <- train(data.ml[, 2]~., data=data.ml.stats.centscal, method="svm", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
getModelInfo()
modelo.svm.tunned <- train(data.ml[, 2]~., data=data.ml.stats.centscal, method="svmLinear", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 3)
grid.svm.linear <- expand.grid(sigma = c(0.05,0.0456,0.0577), C = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml[, 2]~., data=data.ml.stats.centscal, method="svmLinear", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
grid.svm.linear <- expand.grid(sigma = c(0.05,0.0456,0.0577))
modelo.svm.tunned <- train(data.ml[, 2]~., data=data.ml.stats.centscal, method="svmLinear", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml[, 2]~., data=data.ml.stats.centscal, method="svmLinear", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(y = data.ml[, 2]~., x = data=data.ml.stats.centscal, method="svmLinear", trControl=control.svm.linear, tuneGrid=grid.svm.linear, allowParallel = TRUE)
install.packagess(party)
install.packages(party)
install.packages("party")
library("party")
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, classProbs = T, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(y = data.ml[, 2]~.,
x = data=data.ml.stats.centscal,
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, classProbs = T, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
data.ml[, 2],
method="svmLinear",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
metric = "ROC",
allowParallel = TRUE)
modelo.svm.tunned <- train(data.ml.stats.centscal,
data.ml[, 2],
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
metric = "ROC",
allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, classProbs = T, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
as.factor(data.ml[, 2]),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
metric = "ROC",
allowParallel = TRUE)
?make.names
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, classProbs = T, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
data.ml[, 2],
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
metric = "ROC",
allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, classProbs = T, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
data.ml[, 2],
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
modelo.svm.tunned <- train(data.ml[, 2],
data.ml.stats.centscal,
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
modelo.svm.tunned <- train(
data.ml.stats.centscal,
data.ml[, 2],
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
modelo.svm.tunned <- train(data.ml.stats.centscal,
read.table(as.factor(data.ml[, 2])),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
read.table(as.factor(data.ml[, 2])),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
modelo.svm.tunned <- train(data.ml.stats.centscal,
as.factor(data.ml[, 2]),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
modelo.svm.tunned <- train(data.ml.stats.centscal,
as.factor(data.ml[, 2]),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
control.svm.linear <- trainControl(method = "repeatedcv", repeats = 5, summaryFunction = twoClassSummary)
grid.svm.linear <- expand.grid(C = seq(0.05,0.1,length=10), sigma = c(1.5,1.596,1.65,1.89,1.95,2,2.2,2.44))
modelo.svm.tunned <- train(data.ml.stats.centscal,
as.factor(data.ml[, 2]),
method="svmRadial",
trControl=control.svm.linear,
tuneGrid=grid.svm.linear,
allowParallel = TRUE)
install.packages("cluster")
install.packages("fpc")
install.packages("fpc")
install.packages("fpc")
```
knitr::opts_chunk$set(echo = TRUE)
library("cluster")
library("fpc")
datos.kmeans <- datos.ml[1:200]
datos.kmeans <- data.ml[1:200]
clusters <- kmeans(datos.kmeans, centers = 2) #Dos centros, uno por vencedor
clusters$centers
clusters$cluster
# Ahora sacamos las plots
#Esta representación es sobre los dos ejes principales (componentes) que más explicación dan
clusplot(datos.kmeans, clusters$cluster, color = T, main = "Representación de 200 partidas en 2D - Función Clusplot", xlab = "Componente 1", ylab = "Componente 2")
#Esta representación es con componentes discriminantes, que consisten en las dos dimensiones donde la representación de los datos es más linealmente separable respecto a la predicción de los grupos que ha hecho kmeans
plotcluster(datos.kmeans, clusters$cluster)
plotcluster(datos.kmeans, clusters$cluster, bw = T)
plotcluster(datos.kmeans, clusters$cluster, pch = 2)
plotcluster(datos.kmeans, clusters$cluster)
datos.kmeans <- data.ml[1:1000]
clusters <- kmeans(datos.kmeans, centers = 2) #Dos centros, uno por vencedor
clusters$centers
clusters$cluster
# Ahora sacamos las plots
#Esta representación es sobre los dos ejes principales (componentes) que más explicación dan
clusplot(datos.kmeans, clusters$cluster, color = T, main = "Representación de 200 partidas en 2D - Función Clusplot", xlab = "Componente 1", ylab = "Componente 2")
#Esta representación es con componentes discriminantes, que consisten en las dos dimensiones donde la representación de los datos es más linealmente separable respecto a la predicción de los grupos que ha hecho kmeans
plotcluster(datos.kmeans, clusters$cluster)
length(data.ml)
nrow(data.ml)
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
knitr::opts_chunk$set(echo = TRUE)
#Usamos la matriz de centrado y escalado para que cada coordenada represente el mismo grado de diferencia
d <- dist(data.ml.stats.centscal[1:100], method = "euclidean")
#Usamos la matriz de centrado y escalado para que cada coordenada represente el mismo grado de diferencia
d <- dist(data.ml.stats.centscal[1:100, ], method = "euclidean")
cluster.jerarquico <- hclust(d, method = "complete" )
plot(cluster.jerarquico, cex = 0.6, hang = -1)
#Usamos la matriz de centrado y escalado para que cada coordenada represente el mismo grado de diferencia
d <- dist(data.ml.stats.centscal[1:1000, ], method = "euclidean")
cluster.jerarquico <- hclust(d, method = "complete" )
plot(cluster.jerarquico, cex = 0.6, hang = -1)
#Usamos la matriz de centrado y escalado para que cada coordenada represente el mismo grado de diferencia
d <- dist(data.ml.stats.centscal[1:51000, ], method = "euclidean")
#Usamos la matriz de centrado y escalado para que cada coordenada represente el mismo grado de diferencia
d <- dist(data.ml.stats.centscal[1:50, ], method = "euclidean")
cluster.jerarquico <- hclust(d, method = "complete" )
plot(cluster.jerarquico, cex = 0.6, hang = -1)
plot(cluster.jerarquico, cex = 0.4, hang = -1)
plot(cluster.jerarquico, cex = 0.5, hang = -1)
plot(cluster.jerarquico, cex = 0.5, hang = 1)
plot(cluster.jerarquico, cex = 0.5, hang = 2)
plot(cluster.jerarquico, cex = 0.5, hang = 0)
plot(cluster.jerarquico, cex = 0.5, hang = 3)
plot(cluster.jerarquico, cex = 0.5, hang = -2)
plot(cluster.jerarquico, cex = 0.5, hang = -3)
plot(cluster.jerarquico, cex = 0.5, hang = -1)
d <- dist(data.ml.stats.centscal[1:75, ], method = "euclidean")
cluster.jerarquico <- hclust(d, method = "complete" )
plot(cluster.jerarquico, cex = 0.5, hang = -1)
d <- dist(data.ml.stats.centscal[1:60, ], method = "euclidean")
cluster.jerarquico <- hclust(d, method = "complete" )
plot(cluster.jerarquico, cex = 0.5, hang = -1)
print(paste0("El tamaño de la tabla de games es de: ", object_size(data.games) ))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
#install.packages("knitr")
#install.packages("dplyr")
#install.packages("pryr")
#install.packages("corrplot")
#install.packages("rjson")
#install.packages("plyr")
#install.packages("wordcloud")
#install.packages("ggplot2")
#install.packages("hexbin")
#install.packages("RColorBrewer")
#install.packages("FactoMineR")
#devtools::install_github("kassambara/factoextra")
#install.packages("factoextra")
#install.packages("arules")
#install.packages("arulesViz")
#install.packages("fastDummies")
#install.packages("caret")
#install.packages("nnet")
#install.packages("gmodels")
#install.packages("class")
#install.packages("randomforest")
#install.packages("e1071")
#install.packages("aplpack")
#install.packages("cluster")
#install.packages("fpc")
#install.packages("purrr")
library("corrplot")
library("dplyr")
library("pryr")
library("rjson")
library("plyr")
library("wordcloud")
library("ggplot2")
library("hexbin")
library("RColorBrewer")
library("FactoMineR")
library("factoextra")
require("arulesViz")
require("arules")
library("Matrix")
library("fastDummies")
library("caret")
library("nnet")
library("gmodels")
library("class")
library("randomForest")
library("e1071")
library("aplpack")
library("cluster")
library("fpc")
library("purrr")
install.packages("purrr")
print(paste0("El tamaño de la tabla de games es de: ", object_size(data.games) ))
data.games <- read.csv("../data/games.csv")
data.champs <- read.csv("../data/champs.csv")
lista.championInfo <- fromJSON(file = "../data/champion_info.json")
lista.championInfo2 <- fromJSON(file="../data/champion_info_2.json")
lista.summonerSpell <- fromJSON(file="../data/summoner_spell_info.json")
print( paste0("El tamaño de la tabla de games es de: ", object_size(data.games) ))
object_size(data.games)
print( paste0("El tamaño de la tabla de games es de: ", object_size(data.games) ))
object_size(data.games)
print( paste0("El tamaño de la tabla de games es de: ", size ))
print( paste0("El tamaño de la tabla de games es de: ", as.character(size) ))
plot(cluster.jerarquico, cex = 0.5, hang = -1, main="Dendrograma 60 primeras partidas")
